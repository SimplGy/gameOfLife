// Generated by CoffeeScript 1.7.1
(function() {
  var Model, View;

  View = Backbone.View.extend({
    tagName: "i",
    events: {
      touchstart: "cellClicked",
      mousedown: "cellClicked",
      mouseover: "mouseover",
      mouseout: "mouseout",
      touchend: "mouseout"
    },
    initialize: function() {
      _.bindAll(this);
      this.model.on("change:isAlive", this.onChangeIsAlive);
      return this.render();
    },
    render: function() {
      var size, transform;
      size = this.model.get('size');
      transform = "translate3d(" + (size * this.model.get('y')) + "px, " + (size * this.model.get('x')) + "px, 0)";
      return this.$el.css({
        width: size,
        height: size,
        '-webkit-transform': transform,
        '-moz-transform': transform
      });
    },
    onChangeIsAlive: function() {
      if (this.model.get("isAlive")) {
        return this.$el.addClass("alive");
      } else {
        return this.$el.removeClass("alive");
      }
    },
    mouseover: function() {
      if (this.options.app.isPressing && !this.alreadyToggled) {
        this.model.toggle();
        return this.alreadyToggled = true;
      }
    },
    mouseout: function() {
      return this.alreadyToggled = false;
    },
    cellClicked: function() {
      return this.model.toggle();
    }
  });

  Model = Backbone.Model.extend({
    defaults: {
      isAlive: false,
      x: null,
      y: null,
      size: null
    },
    initialize: function() {
      return this.neighbors = [];
    },
    calculateNeighbors: function(grid) {
      var x, y;
      x = this.get("x");
      y = this.get("y");
      this.setNeighbor(grid, x - 1, y - 1);
      this.setNeighbor(grid, x, y - 1);
      this.setNeighbor(grid, x + 1, y - 1);
      this.setNeighbor(grid, x - 1, y);
      this.setNeighbor(grid, x + 1, y);
      this.setNeighbor(grid, x - 1, y + 1);
      this.setNeighbor(grid, x, y + 1);
      return this.setNeighbor(grid, x + 1, y + 1);
    },
    setNeighbor: function(grid, x, y) {
      var possibleNeighbor;
      if (!grid[x]) {
        return;
      }
      possibleNeighbor = grid[x][y];
      if (possibleNeighbor && possibleNeighbor instanceof Backbone.Model) {
        return this.neighbors.push(possibleNeighbor);
      }
    },
    toggle: function() {
      return this.set("isAlive", !this.get("isAlive"));
    },
    kill: function() {
      return this.willLive = false;
    },
    birth: function() {
      return this.willLive = true;
    },
    randomize: function() {
      this.willLive = null;
      return this.set("isAlive", !(Math.round(Math.random() * 10) % 5));
    },
    compete: function() {
      var count, n, _i, _len, _ref;
      count = 0;
      _ref = this.neighbors;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        n = _ref[_i];
        if (n.get('isAlive')) {
          count++;
        }
      }
      if (this.get("isAlive")) {
        switch (count) {
          case 0:
          case 1:
            return this.kill();
          case 2:
          case 3:
            return this.birth();
          default:
            return this.kill();
        }
      } else {
        if (count === 3) {
          return this.birth();
        }
      }
    },
    step: function() {
      var curr;
      curr = this.get('isAlive');
      if (curr !== this.willLive) {
        return this.set("isAlive", this.willLive);
      }
    }
  });

  window.CellModel = Model;

  window.CellView = View;

}).call(this);
