// Generated by CoffeeScript 1.7.1
(function() {
  var Model, View;

  View = Backbone.View.extend({
    tagName: "i",
    events: {
      touchstart: "cellClicked",
      mousedown: "cellClicked",
      mouseover: "mouseover",
      mouseout: "mouseout",
      touchend: "mouseout"
    },
    initialize: function() {
      _.bindAll(this);
      this.model.on("change:isAlive", this.render);
      return this.render(this.model);
    },
    render: function(model) {
      if (model.get("isAlive")) {
        return this.$el.addClass("alive");
      } else {
        return this.$el.removeAttr("class");
      }
    },
    mouseover: function() {
      if (this.options.app.isPressing && !this.alreadyToggled) {
        this.model.toggle();
        return this.alreadyToggled = true;
      }
    },
    mouseout: function() {
      return this.alreadyToggled = false;
    },
    cellClicked: function() {
      return this.model.toggle();
    }
  });

  Model = Backbone.Model.extend({
    defaults: {
      isAlive: false,
      willLive: null,
      x: null,
      y: null,
      size: null
    },
    initialize: function() {
      return this.neighbors = [];
    },
    calculateNeighbors: function(grid) {
      var x, y;
      x = this.get("x");
      y = this.get("y");
      this.setNeighbor(grid, x - 1, y - 1);
      this.setNeighbor(grid, x, y - 1);
      this.setNeighbor(grid, x + 1, y - 1);
      this.setNeighbor(grid, x - 1, y);
      this.setNeighbor(grid, x + 1, y);
      this.setNeighbor(grid, x - 1, y + 1);
      this.setNeighbor(grid, x, y + 1);
      return this.setNeighbor(grid, x + 1, y + 1);
    },
    setNeighbor: function(grid, x, y) {
      var possibleNeighbor;
      if (!grid[x]) {
        return;
      }
      possibleNeighbor = grid[x][y];
      if (possibleNeighbor && possibleNeighbor instanceof Backbone.Model) {
        return this.neighbors.push(possibleNeighbor);
      }
    },
    toggle: function() {
      return this.set("isAlive", !this.get("isAlive"));
    },
    kill: function() {
      return this.set("willLive", false);
    },
    birth: function() {
      return this.set("willLive", true);
    },
    randomize: function() {
      this.set("willLive", null);
      return this.set("isAlive", !!(Math.round(Math.random() * 10) % 2));
    },
    compete: function() {
      var count, i;
      i = void 0;
      count = 0;
      i = 0;
      while (i < this.neighbors.length) {
        if (this.neighbors[i].get("isAlive")) {
          count++;
        }
        i++;
      }
      if (this.get("isAlive")) {
        switch (count) {
          case 0:
          case 1:
            return this.kill();
          case 2:
          case 3:
            return this.set("willLive", this.get("isAlive"));
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
            return this.kill();
        }
      } else {
        if (count === 3) {
          return this.birth();
        }
      }
    },
    step: function() {
      this.set("isAlive", this.get("willLive"));
      return this.set("willLive", null);
    }
  });

  window.CellModel = Model;

  window.CellView = View;

}).call(this);
