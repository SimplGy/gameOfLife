// Generated by CoffeeScript 1.7.1
(function() {
  var GameRunner, _cellsWide, _pauseLength;

  _pauseLength = 3 * 1000;

  _cellsWide = 75;

  GameRunner = Backbone.View.extend({
    events: {
      touchstart: "startPress",
      mousedown: "startPress",
      mouseup: "endPress",
      touchend: "endPress"
    },
    initialize: function() {
      _.bindAll(this);
      this.setElement("#GameOfLife");
      this.render();
      $(window).on("resize", _.debounce(this.render, 100));
      $("#Pause").on("click", this.onPauseBtnClick);
      $("#Clear").on("click", this.cleanSlate);
      $("#Random").on("click", this.randomize);
      return $("#Metabolism").on("change", this.onMetabolismChange);
    },
    render: function() {
      this.stop();
      this.buildCells();
      this.randomize();
      return this.start();
    },
    startPress: function() {
      return this.isPressing = true;
    },
    endPress: function() {
      return this.isPressing = false;
    },
    buildCells: function() {
      var availHeight, availWidth, cell2d, cellSize, curModel, curView, i, j;
      this.$el.empty();
      console.log('buildCells');
      availWidth = window.innerWidth;
      availHeight = window.innerHeight;
      cellSize = availWidth / _cellsWide;
      this.cols = Math.floor(availWidth / cellSize);
      this.rows = Math.floor(availHeight / cellSize);
      j = void 0;
      curModel = void 0;
      curView = void 0;
      cell2d = [];
      this.cells = [];
      i = 0;
      while (i < this.rows) {
        cell2d[i] = [];
        j = 0;
        while (j < this.cols) {
          curModel = new CellModel({
            x: i,
            y: j,
            size: cellSize
          });
          curView = new CellView({
            model: curModel,
            app: this
          });
          cell2d[i].push(curModel);
          this.cells.push(curModel);
          this.$el.append(curView.el);
          j++;
        }
        this.$el.append("<br/>");
        i++;
      }
      return _.each(this.cells, (function(cell) {
        return cell.calculateNeighbors(cell2d);
      }).bind(this));
    },
    live: function() {
      _.each(this.cells, function(cell) {
        return cell.compete();
      });
      _.each(this.cells, function(cell) {
        return cell.step();
      });
      if (!this.paused) {
        return setTimeout(this.live, this.metabolism);
      }
    },
    onPauseBtnClick: function() {
      $("#Pause").attr('disabled', true);
      this.stop();
      return setTimeout((function(_this) {
        return function() {
          $("#Pause").removeAttr('disabled');
          return _this.start();
        };
      })(this), _pauseLength);
    },
    stop: function() {
      $("body").removeClass("running");
      this.paused = true;
      return $("#Start").text("Start");
    },
    start: function() {
      $("body").addClass("running");
      this.paused = false;
      this.onMetabolismChange();
      this.live();
      return $("#Start").text("Stop");
    },
    cleanSlate: function() {
      _.each(this.cells, function(cell) {
        return cell.kill();
      });
      _.each(this.cells, function(cell) {
        return cell.step();
      });
      return this.stop();
    },
    randomize: function() {
      return _.each(this.cells, function(cell) {
        return cell.randomize();
      });
    },
    onMetabolismChange: function() {
      var speed;
      speed = $("#Metabolism").val();
      return this.metabolism = Math.abs(speed - 100) * 2 + 10;
    }
  });

  window.GameRunner = GameRunner;

}).call(this);
